一：Git是什么？

    Git是目前世界上最先进的分布式版本控制系统。

二：SVN与Git的最主要的区别？

	SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。

	Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。

三：在windows上如何安装Git？


	安装git的一些配置信息设置：

	$ git config --global user.name 'your name'
	$ git config --global user.email 'your email'

	因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。

	注意：git config  --global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。


	获取Git配置信息:

	git config --list





	$ cd E:   ==>进入哪个盘
	$ cd dir ==>进入哪个目录

	$ mkdir dir ==>新建目录
	$ cd dir ==>进入新建的目录
	$ pwd ==>显示当前目录的路径


	$ git init ==>这个目录变成git可以管理的仓库
				（生成一个隐藏的.git目录，ls -ah命令可以看到）

	1、git init 把这个目录变成git可以管理的仓库	
		1).  在仓库目录下新建一个readme.txt文件

			==> touch readme.txt

			==> 使用node fs模块建：
				node ==>进入终端
				var fs = require('fs');
				fs.writeFile('readme.txt', '这里是readme.txt的文件内容')



	2、把文件添加到版本库中
		1).  git add readme.txt  ==> 将新建readme.txt文件添加到暂存区里面去
		2).  git commit   ==>   把文件提交到Git仓库
			 git commit -m '本次提交的注释' 

			 如何将第1)、第2)不一步执行？
			 	git commit -am '本次提交的注释'
			 	==>前提是仓库中已经存在该文件，提交不了新文件

		3).  git status ==>查看是否还有文件未提交
			 	修改提示
			 		a). 红色 ==>文件修改了，当还没提交到暂存区
			 		b). 绿色 ==>文件修改了，并已经提交到暂存区


		4).  修改readme.txt文件内容
		5).  git diff readme.txt  ==>修改的内容和库中内容的对比，确认无误
			 	有时候git diff readme.txt不起作用，可以试一下：
			 	  a). 运行git命令： rm -f ./.git/index.lock
			 	  b). 重启git

		6).  git add readme.txt   ==> 将修改的内容提交到暂存区里面去
		7).  git commit -m  '提交本次修改，并加上本次修改的注释'   ==>   把修改后		的文件提交到Git仓库，并写好注释
		8).  git log readme.txt  ==> 查看提交注释记录
			 git log --pretty=oneline ==> 查看最近提交记录，oneline显示查看		的提交注释
		
	3、版本回退
		1).  cat readme.txt ==>可以先查看一下文件里面的内容
		2).  整个文件夹的版本回退（感觉该办法慎用！！！）
		    a). git reset --hard HEAD^  ==>回退到上一个版本
				git reset --hard HEAD^^  ==>回退到上2个版本
				git reset --hard HEAD^^^  ==>回退到上3个版本
				git reset --hard HEAD~100  ==>回退到上100个版本
		      

		    b). git reflog ==>查看版本号的列表
		        git reset  –hard 版本号 ==> 通过版本号回退到指定版本

		3). 那么如何实现单个文件的版本回退呢？
			git log 文件名
			git reset  版本号 文件名




	理解工作区与暂存区的区别？

	  工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。

      版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。

    我们前面说过使用Git提交文件到版本库有两步：

  		第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。

  		第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。









四：Git撤销修改和删除文件操作。
	1. 撤销修改：

		1). 版本回退的办法（尚未 add to 暂存区）

			第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。

			第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset  –hard HEAD^	
				(这个方法有问题，回到我想要版本的上一个版本，所以用这个方法必须先add->commit, 然后再恢复到上一个版本)


		2). 使用git命令撤销修改

			第三：$ git checkout -- readme.txt

				a). readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
				
				b). 另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。


		注意：命令git checkout -- readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。


	2. 删除文件
		1)、尚未commit, 即版本库中没有该文件
		   a). git命令删除：git rm deleteFile.txt
		   b). 文件夹中直接删除

		2)、已经提交到版本库了
		   a)   
		   		aa). git rm deleteFile.txt

		   	 	bb). git commit -m '因为什么，删除了该文件'

		   	  	cc). 突然间我不想删除该文件了，咋办？

		   	  		 aaa). git checkout -- deleteFile.txt


		   	  		 bbb). git reflog ==> 查看版本号， 
		   	  		 	   git reset --hard 版本号 ==>通过回退实现撤销删除

		   	  		 注意：整个文件夹的版本回退（感觉该办法慎用！！！），可用于尚未修改别的文件   





五、远程库

	在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：

    1. 第一步：创建SSH Key。
     	1). 在用户主目录下，看看有没有.ssh目录，如果有，再看看这个
     	目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令；
     	2). 如果没有的话，在这个文件夹下打开命令行，输入如下命令：

	 	ssh-keygen  -t rsa –C "youremail@example.com"

	 	然后该文件夹先生成两个文件：
	 		id_rsa是私钥，不能泄露出去
	 		id_rsa.pub是公钥，可以放心地告诉任何人。

	   第二步：
	 	1). 登录github,打开"settings"中的SSH Keys页面
	 	2). 点击"Add SSH Key",填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。


	 2. 如何添加远程库？
	 	1). 首先，登录github上，然后在右上角找到"create a new repo"创建一个新的仓库，仓库名：git-test

	 	2). 项目创建完后会生成一个项目地址：
	 		https://github.com/yanmuxiao/git-guide.git

	 	3). 如何将远程库和本地的库关联起来
	 		a). 在存放该项目的目录下建一个和远程库同名的项目目录：

	 			$ mkdir runoob-git-test    # 创建测试目录
				$ cd runoob-git-test      # 进入测试目录
				$ echo "# 菜鸟教程 Git 测试" >> README.md     							# 创建 README.md 文件并写入内容

				$ ls            # 查看目录下的文件
					README
				$ git init      # 初始化
				$ git add README.md         # 添加文件
				$ git commit -m "添加 README.md 文件"        
								# 提交并备注信息
					[master (root-commit) 0205aab] 添加 README.md 文件
 					1 file changed, 1 insertion(+)
 					create mode 100644 README.md



				# 提交到 Github
				$ git remote add origin git@github.com:tianqixin/runoob-git-test.git     #用到2)中的项目地址
				#只需要执行remote add origin ~ 一次	
				
				$ git push -u origin master









